---
created_at: 2017-12-07T22:41:11+0900
published_at: 2017-12-07T22:41:11+0900
updated_at: 2018-03-21T23:03:53+09:00
format: docbook
title: "Rust での never type とセミコロン、型推論のルール変遷"
tags:
  - prog-rust
  - advent-calendar
kind: article

excerpt: "Rust 1.21.0での never type とセミコロン周辺の型推論の例外的なルールとその変遷や経緯を調べたまとめ。"
---
<?xml version="1.0"?>
<article
	xmlns="http://docbook.org/ns/docbook"
	xmlns:xl="http://www.w3.org/1999/xlink"
	xmlns:le="https://www.cardina1.red/_ns/docbook/lo48576-extension"
	xmlns:h="http://www.w3.org/1999/xhtml"
	xml:id="article-2017-12-07-never-type-and-semicolon"
	xml:lang="ja"
	version="5.1"
>
<title>Rust での never type とセミコロン、型推論のルール変遷</title>
<simpara>
	この記事は、 <link xl:href="https://qiita.com/advent-calendar/2017/rust-internal">Rust Internal Advent Calendar 2017</link> の7日目の記事である。<h:br />
</simpara>
<important>
	<title>潜在的に古い情報</title>
	<simpara>
		この記事の内容は、特記なき限り 2017-10-14 およびそれ以前の情報に基く。
		2017-10-14 時点での最新の安定リリースは Rust-1.21.0 (2017-10-12) である。
	</simpara>
</important>
<note>
	<title>意訳</title>
	<simpara>
		Issue や Pull Request のタイトル、コメント引用その他諸々は、原文がだいたい英語のため、要約と意訳(雑な訳とも言う)を行った。
		(口調が雑になっているのも原文とは全く関係なく、私の訳の問題である。)
		正しい情報を得るには、各所リンク先の原文を参照されたい。
	</simpara>
</note>

<section xml:id="question">
	<title>疑問</title>

	<important>
		<title>潜在的に古い情報</title>
		<simpara>
			このセクションの内容は、特記なき限り 2017-10-14 およびそれ以前の情報に基く。
			2017-10-14 時点での最新の安定リリースは Rust-1.21.0 (2017-10-12) である。
		</simpara>
	</important>

	<section xml:id="daily-use-assumption">
		<title>日常における前提</title>

		<simpara>
			最後の式がセミコロンで終わっているようなブロックは、全体としては unit 型 (<type>()</type>) となる。
		</simpara>
		<informalfigure xml:id="code--usual-type-with-semicolon">
			<programlisting language="rust"><![CDATA[fn main() {
    let _: () = { 42; };
}]]></programlisting>
			<caption>
				42; はセミコロンで終わる式なので、ブロックの型は unit (<type>()</type>) となる
				(<link xl:href="https://play.rust-lang.org/?gist=80bedf6a5c0c3dbec76164d97122d4e7&amp;version=stable">playground</link>)
			</caption>
		</informalfigure>

		<simpara>
			絶対に実行が返ってこない、また値が作られないことを示す <type>!</type> 型 (never type) <footnote xml:id="footnote-diverging-type" refmark-id="ref-footnote-diverging-type">
				型理論とかでは diverging type (発散型) であったり bottom type (ボトム型)と呼んだりするようだが、 Rust では never type だとか bang type だとかの呼び方もある。
				feature gate としては、今 (<le:time datetime="2017-10-14">2017-10-14</le:time>) は <link xl:href="https://github.com/rust-lang/rfcs/pull/1216#issuecomment-240644538"><code>never_type</code></link> の名前が使われている。
			</footnote>は、いかなる型へも暗黙に型強制<footnote xml:id="footnote-type-coercion" refmark-id="ref-footnote-type-coercion">
				ある型を、その場所で求められる別の型へと(暗黙に)変換すること。
				たとえば、 <type>&amp;str</type> が求められている場所に <type>&amp;String</type> の値を渡すと、 <link xl:href="https://doc.rust-lang.org/std/ops/trait.Deref.html"><code>Deref</code> trait</link> を利用してこれが自動的に <type>&amp;str</type> の値に変換されるのだが、これも型強制のはたらきによるものである。
			</footnote>できる。
		</simpara>
		<informalfigure xml:id="code--usual-type-with-semicolon">
			<programlisting language="rust"><![CDATA[
#[allow(unreachable_code)]
fn main() {
    let _: i32 = panic!("Hello");
    let _: Option<()> = ::std::process::exit(0);
}]]></programlisting>
			<caption>
				<link xl:href="https://doc.rust-lang.org/1.21.0/std/macro.panic.html"><code>panic!</code></link> や <link xl:href="https://doc.rust-lang.org/1.21.0/std/process/fn.exit.html"><function>std::process::exit</function></link> は呼び出し元に絶対に戻らないため、任意の型に(暗黙に)型強制される
				(<link xl:href="https://play.rust-lang.org/?gist=aff4bae775b7c4c0310cf29f1864a542&amp;version=stable">playground</link>)
			</caption>
		</informalfigure>
	</section>

	<section xml:id="question--code">
		<title>問題のコード</title>

		<important>
		<title>古い情報</title>
		<simpara>
			問題のコードは Rust-1.22.1 時点ではコメントの通りコンパイルが通るが、 <le:time datetime="2017-12-07">2017-12-07</le:time> 時点での nightly (rustc-1.24.0-nightly (5a2465e2b 2017-12-06)) ではコンパイルが通らない。
		</simpara>
		<informalfigure>
			<programlisting language="rust"><![CDATA[#![allow(unreachable_code)]

// コンパイル可能だったが、2017-12-07 の nightly では不可。
fn dont_return() -> ! {
    panic!();
    // (ここから到達不可能)

    1
}

fn main() {
}]]></programlisting>
			<screen><![CDATA[error: cannot coerce `{integer}` to !
 --> src/main.rs:8:5
  |
8 |     1
  |     ^
  |
  = note: #[deny(coerce_never)] on by default
  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
  = note: for more information, see issue #46325 <https://github.com/rust-lang/rust/issues/46325>]]></screen>
			<caption>
				<link linkend="time-series2--issue-46325">issue #46325</link>, <link linkend="time-series2--pr-45880">PR #45880</link> でエラー扱いになった
				(<link xl:href="https://play.rust-lang.org/?gist=d554dfe63da1c64ed89dfa643419743d&amp;version=nightly">playground</link>,
				<link xl:href="https://gist.github.com/d554dfe63da1c64ed89dfa643419743d">gist</link>)
			</caption>
		</informalfigure>
	</important>

		<informalfigure xml:id="code--questions">
			<programlisting language="rust"><![CDATA[#![allow(unreachable_code)]

// コンパイルエラー。
fn actually_return() -> ! {
    // 型エラー (expected `!`, found `{integer}`)。
    // `1` (整数型)は `!` に型強制できない。
    1

    // [予想1] `!` でない型の値を `!` に型強制することはできない。
}

// コンパイル可能。
fn dont_return() -> ! {
    panic!();
    // (ここから到達不可能)

    // 何事もなかったかのようにコンパイルが通る。
    1

    // 何故コンパイルが通るの？
    // `1` が `!` として扱われているのだろうか？
    // これは `actually_return()` における予想1と異なる挙動である。
    // [予想2] 到達不可能な箇所のコードでは型チェックが省略される。
}

// コンパイルエラー。
fn dont_return_wrong_type() -> i32 {
    panic!();
    // (ここから到達不可能)

    // 型エラー (expected `i32`, found `&str`)。
    "should be type error"

    // これは `dont_return()` における予想2とは異なる挙動である。
    // [疑問1] `!` を返す(というか返らない)はずの `dont_return()` で
    //         `1` になる式を最後に置けたのは何故？
}

// コンパイル可能。
fn semicolon_bang() {
    // 何事もなかったかのようにコンパイルが通る。
    let _: &str = { panic!(); };

    // 前提として、 `expr;` は `()` 型となる。
    // そのため、 `{ expr; }` もまた `()` 型となるはずだが、
    // `{ panic!(); }` は `()` でなく `&str` として扱われている。
    // ということは、 `{ panic!(); }` の値は `!` 型として扱われているのだろうか？
    // [疑問2] `{ panic!(); }` が `()` だけでなく任意の型として扱える(おそらく `!`
    //         として推論されている？)のは、どのような規則によるものかなのか。
}

fn main() {
}]]></programlisting>
			<caption>
				疑問を詰め込んだコード
				(<link xl:href="https://play.rust-lang.org/?gist=3c609495433446181bd888f6cca053d9&amp;version=stable">playground</link>,
				<link xl:href="https://gist.github.com/3c609495433446181bd888f6cca053d9">gist</link>)
			</caption>
		</informalfigure>
	</section>

	<section xml:id="question--abstract">
		<title>問題の概要</title>
		<simpara>
			<link linkend="daily-use-assumption">前述</link>のとおり:
		</simpara>
		<itemizedlist>
			<listitem>
				(1) 最後の式がセミコロンで終わるブロックは、 <type>()</type> 型
			</listitem>
			<listitem>
				(2) <type>!</type> は任意の型に型強制できる
			</listitem>
		</itemizedlist>
		<simpara>
			一方、<link linkend="code--questions">先のコード</link>から読みとれる(推測できる)のは:
		</simpara>
		<itemizedlist>
			<listitem>
				(3) 普通の型は自由に <type>!</type> に型強制できるわけではない (→ <code>actually_return</code>)
			</listitem>
			<listitem>
				(4) 到達不可能な場所では、どんな型の値でも <type>!</type> に型強制できるようだ (→ <code>dont_return</code>)
				<itemizedlist>
					<listitem>
						(4.a) 最後の式が <type>!</type> になっている？
					</listitem>
					<listitem>
						(4.b) それとも特別に変換が許されるだけ？
					</listitem>
					<listitem>
						(4.c) そもそも型チェックが省略されている？
					</listitem>
				</itemizedlist>
			</listitem>
			<listitem>
				(5) 到達不可能な場所でも無条件に任意の型への型強制が許されるわけではなさそうだ (→ <code>dont_return_wrong_type</code>)
				<itemizedlist>
					<listitem>
						→ (4.a) と (4.c) は違うっぽい
					</listitem>
				</itemizedlist>
			</listitem>
			<listitem>
				(6) 末尾に到達不可能であるようなブロックを、セミコロンで終わる式で終わらせると、ブロックは任意の型へ型強制できるらしい (→ <code>semicolon_bang</code>)
				<itemizedlist>
					<listitem>
						最後の式が <type>()</type> でなく <type>!</type> を返しているように見える
					</listitem>
					<listitem>
						→(4.a) は違うはず……あれ？
					</listitem>
				</itemizedlist>
			</listitem>
		</itemizedlist>
		<simpara>
			といったわけで、挙動を観察していてもどうにもはっきりしたルールがわからないので、 RFC か Issue を漁って調べようということになった。
		</simpara>
		<simpara>
			最終的な疑問は、コードのコメントにあるとおり、以下の2点である。
		</simpara>
		<itemizedlist>
			<listitem>
				疑問1: <type>!</type> が期待されている場所で <code>1</code> を返す(はずの)ブロックを書けたのは何故か？
			</listitem>
			<listitem>
				疑問2: <code>{ panic!(); }</code> は、何故 <type>()</type> 型の値でなく <type>!</type> 型であるかのように振る舞うのか？
			</listitem>
		</itemizedlist>
	</section>
</section>

<section xml:id="short-answer">
	<title>簡単な解答</title>

	<important>
		<title>潜在的に古い情報</title>
		<simpara>
			このセクションの内容は、特記なき限り 2017-10-14 およびそれ以前の情報に基く。
			2017-10-14 時点での最新の安定リリースは Rust-1.21.0 (2017-10-12) である。
		</simpara>
	</important>

	<section xml:id="short-answer--question-1">
		<title>疑問1: `!` が期待されている場所で `1` を返す(はずの)ブロックを書けたのは何故か</title>

		<important>
			<title>古い情報</title>
			<simpara>
				<link linkend="time-series2--issue-46325">issue #46325</link>, <link linkend="time-series2--pr-45880">PR #45880</link> でエラー扱いになったため、今 (<le:time datetime="2017-12-07">2017-12-07</le:time>) はもうコンパイルは通らない。
			</simpara>
		</important>

		<simpara>
			答え: <link linkend="time-series--pr-40224">PR #40224</link> により、 <emphasis><type>!</type> が要求されている場所で diverge する式があった場合、その式の結果を <type>!</type> へ型強制することが許されるようになった</emphasis>ため。
		</simpara>
		<simpara>
			すなわち、 <code>{ panic!(); 1 }</code> は diverge する式であるから、この式(ブロック)は <type>!</type> への型強制が許される。
			よって、型チェックが通る。
		</simpara>
	</section>

	<section xml:id="short-answer--question-2">
		<title>疑問2: `{ panic!(); }` は、何故 `()` 型の値でなく `!` 型であるかのように振る舞うのか</title>

		<simpara>
			答え: <link linkend="time-series--pr-40224">PR #40224</link> により、 <emphasis>diverge する文を含むブロックがあり、末尾の式(セミコロンで終わらない、戻り値となる式)が存在しない場合、ブロックの型は <type>!</type> となるということになった</emphasis>ため。
		</simpara>
	</section>

	<section xml:id="short-answer--omake">
		<title>おまけ</title>

		<important>
			<title>古い情報</title>
			<simpara>
				<link linkend="time-series2--issue-46325">issue #46325</link>, <link linkend="time-series2--pr-45880">PR #45880</link> でエラー扱いになったため、疑問1の場合と同じく、これももう今 (<le:time datetime="2017-12-07">2017-12-07</le:time>) ではコンパイルは通らない。
			</simpara>
		</important>

		<informalfigure>
			<programlisting language="rust"><![CDATA[fn main() {
    // コンパイルエラー。
    let _: i32 = {
        panic!();
        ()
    };

    // コンパイル可能。
    let _: i32 = {
        panic!();
        ()
    } as !;
}]]></programlisting>
			<caption>明示的に <type>!</type> にキャストすると……</caption>
		</informalfigure>
		<simpara>
			これも <link linkend="time-series--pr-40224">PR #40224</link> で導入されたルールで説明できる。<h:br />
			<code>{ panic!(); () }</code> は:
		</simpara>
		<itemizedlist>
			<listitem>
				diverge する式であるから、 <type>!</type> への型強制が許される。
			</listitem>
			<listitem>
				しかし diverge する文を含むブロックであっても、末尾の式を持っているから、 <type>!</type> の値としては扱われない。
			</listitem>
		</itemizedlist>
		<simpara>
			ゆえに:
		</simpara>
		<itemizedlist>
			<listitem>
				<code>as !</code> がないまま <type>i32</type> へ型強制しようとすると、ブロックの型は <type>()</type> となるから、 <type>i32</type> への型強制は失敗し、型エラーとなる。
			</listitem>
			<listitem>
				<code>as !</code> で <type>!</type> へ型強制すると、これは成功し、 <code>{ panic!(); () } as !</code> の型は <type>!</type>とされる。
				そこから更に <type>i32</type> へと型強制が起き、そして成功する。
			</listitem>
		</itemizedlist>

		<section xml:id="short-answer--omake--supplement">
			<title>補足</title>

			<simpara>
				この挙動は綺麗に設計されたルールによるものではなく、とりあえず regression を避けながら一貫性を高めるための、一時的な設計であるように見える。
				<type>!</type> の利用 (<code>never_type</code> feature) は未だ安定化されていない機能で、仕様も明確に定まっているわけではなさそうなので、この挙動はいずれ変化するかもしれない。
			</simpara>
		</section>
	</section>
</section>

<section xml:id="terms">
	<title>用語</title>
	<variablelist>
		<varlistentry>
			<term>diverge</term>
			<listitem>
				<simpara>
					値を期待している場所に、実行が戻ってこないこと。
					典型的には、実行が停止したり、途中でブロックや式などを脱出するような場合など。
					例として、以下のようなものがある。
				</simpara>
				<itemizedlist>
					<listitem>
						<simpara>
							<code>let x = return;</code> などは、途中で return してしまい <code>x</code> に実際に何らかの値が代入されることは絶対にないため、 diverge するという。
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<code>3 + panic!()</code> などは、途中で panic してしまい、加算は絶対に実行されないため、 diverge するという。
						</simpara>
					</listitem>
					<listitem>
						<simpara>
							<code>{ ::std::process::exit(0); true }</code> は途中でプログラムが終了してしまい、ブロックの値が <code>true</code> として評価されることは絶対にないため、 diverge するという。
						</simpara>
					</listitem>
				</itemizedlist>
			</listitem>
		</varlistentry>
	</variablelist>
</section>

<section xml:id="time-series">
	<title>時系列 (<le:time datetime="2017-10-14">2017-10-14</le:time> まで)</title>

	<important>
		<title>潜在的に古い情報</title>
		<simpara>
			このセクションの内容は、特記なき限り 2017-10-14 およびそれ以前の情報に基く。
			2017-10-14 時点での最新の安定リリースは Rust-1.21.0 (2017-10-12) である。
		</simpara>
	</important>

	<itemizedlist>
		<listitem>
			<xref linkend="time-series--rfc-1216" />
		</listitem>
		<listitem>
			<xref linkend="time-series--issue-39297" />
		</listitem>
		<listitem>
			<xref linkend="time-series--pr-39485" />
		</listitem>
		<listitem>
			<xref linkend="time-series--issue-39808" />
		</listitem>
		<listitem>
			<xref linkend="time-series--issue-39984" />
		</listitem>
		<listitem>
			<xref linkend="time-series--issue-40073" />
		</listitem>
		<listitem>
			<xref linkend="time-series--pr-40224" />
		</listitem>
		<listitem>
			<xref linkend="time-series--pr-40636" />
		</listitem>
		<listitem>
			<xref linkend="time-series--future" />
		</listitem>
	</itemizedlist>

	<section xml:id="time-series--rfc-1216">
		<title>RFC 1216: 到達不可能であることを示す `!` 、(ユーザにも使えるような)型として扱いたいよね</title>

		<itemizedlist>
			<listitem>
				<link xl:href="https://github.com/rust-lang/rfcs/blob/master/text/1216-bang-type.md">RFC 1216</link>
			</listitem>
			<listitem>
				<link xl:href="https://github.com/rust-lang/rfcs/pull/1216">Promote `!` to a type. #1216</link>
			</listitem>
		</itemizedlist>

		<simpara>
			もともと variant を持たない enum は実行時の値を持てない型として使えていたのだから、 <type>!</type> もそれと同等に(単なる型のひとつとして)扱えた方が嬉しくない？という提案が <link xl:href="https://github.com/rust-lang/rfcs/blob/master/text/1216-bang-type.md">RFC 1216</link> である。
			<type>!</type> を単なる型として扱えるようになると、ユーザが直接に利用することができるというメリットもある
			(たとえば、必ず <code>Ok(_)</code> を返すような関数が <type>Result&lt;_, !&gt;</type> を返す、とユーザが記述できるようになる<footnote xml:id="footnote-std-convert-infallible" refmark-id="ref-footnote-std-convert-infallible">
				たとえば Rust-1.22.0 時点では、 <link xl:href="https://doc.rust-lang.org/1.22.0/std/convert/trait.TryFrom.html"><code>std::convert::TryFrom</code></link> 等が絶対に失敗しない(すなわち <link xl:href="https://doc.rust-lang.org/1.22.0/std/convert/trait.From.html"><code>std::convert::From</code></link> と同様にはたらく)場合のエラー型として、 <type>!</type> ではなく <link xl:href="https://doc.rust-lang.org/1.22.0/std/convert/enum.Infallible.html"><type>std::convert::Infallible</type></link> が用いられている
			</footnote>など)。
		</simpara>
		<simpara>
			この RFC の議論は <link xl:href="https://github.com/rust-lang/rfcs/pull/1216">Promote `!` to a type. #1216</link> で行われており、実装状況は tracking issue である <link xl:href="https://github.com/rust-lang/rust/issues/35121">issue #35121</link> で追跡されている。
		</simpara>
		<simpara>
			この RFC では <code>bang_type</code> feature となっているが、その後改名され、 <le:time datetime="2017-10-14">2017-10-14</le:time> 時点では <code>never_type</code> feature として管理されている。
		</simpara>
	</section>

	<section xml:id="time-series--issue-39297">
		<title>Issue #39297: diverge する式の型がデフォで `()` に推論されたのが、 `?` 演算子で使われる式の型推論にまで影響するんだけど</title>

		<itemizedlist>
			<listitem>
				<link xl:href="https://github.com/rust-lang/rust/issues/39297">fallback for diverging expressions leaks into the `?` operator #39297</link>
			</listitem>
		</itemizedlist>

		<simpara>
			issue 当時の <code>?</code> は <code>try!</code> の糖衣構文であり、 <code>try!</code> の実装が(実際はもう少し複雑だが) <code>match expr { Ok(v) => v, Err(e) => return Err(e.into()) }</code> のような実装となっていた。
			そして、 diverge する式の型はデフォルトの <type>()</type> として見做されていた。
		</simpara>
		<simpara>
			この issue では、 <code>try!</code> の内部で <code>return</code> していることで発生した、 <type>()</type> と見做された式の型(つまり <type>()</type>) が、 <code>?</code> の外に漏れ出して <code>&lt;_ as Deserialize&gt;</code> の部分の <code>_</code> が <type>()</type> だと推論されてしまった、と主張している。
		</simpara>

		<section xml:id="time-series--issue-39297--overview">
			<title>問題の概要</title>

			<programlisting language="rust"><![CDATA[match <_ as Deserialize>::deserialize() {
    Ok(v) => v,
    Err(e) => return Err(e.into()),
}]]></programlisting>
			<simpara>
				まず <code>&lt;_ as Deserialize&gt;::deserialize()</code> の戻り値は <type>Result&lt;Self, String&gt;</type> として宣言されている。
				しかし、(何かの理由で) <code>impl</code> の実装を選択する際に <code>Self</code> に対する推論は行われないことになっている。
				よって、 <code>&lt;_T0 as Deserialize&gt;::deserialize()</code> (ただし <code>_T0, _T1, ...</code> は推論されていない型) は、 <code>_T0</code> が確定されないまま <code>Result&lt;_T0, String&gt;</code> を返すものとして推論される。
			</simpara>
			<programlisting language="rust"><![CDATA[match <_T0 as Deserialize>::deserialize() /* Result<_T0, String> */ {
    Ok(v) => v, /* _T1 */
    Err(e) => return Err(e.into()), /* _T2 */
} /* _T3 */]]></programlisting>
			<simpara>
				さて、 <code>Ok(v)</code> の <code>v</code> の型が <code>_T1</code> であるから、同じ <code>match</code> のもう一方の arm である <code>Err(e) => return Err(e.into())</code> の型を調べ、それを match 式全体の型として使うことになる。
				しかし、この match arm の式は <code>return</code> の結果を返しているから常に diverge する(すなわち、決して値を返さない)。
				すると、この当時の実装では そのような式の型のデフォルトは <type>()</type> であり、結果 <code>Err(e)</code> の場合に返される式の型は <type>()</type> であるとされる。
			</simpara>
			<programlisting language="rust"><![CDATA[match <_T0 as Deserialize>::deserialize() /* Result<_T0, String> */ {
    Ok(v) => v, /* _T1 */
    Err(e) => return Err(e.into()), /* () */
} /* _T3 */]]></programlisting>
			<simpara>
				当然 <code>_T1</code> と <type>()</type> (<code>_T2</code> だった部分)は同じ型であると判断されるから、 <code>v</code> は <code>_T1</code> すなわち <type>()</type> である。
			</simpara>
			<programlisting langage="rust"><![CDATA[match <_T0 as Deserialize>::deserialize() /* Result<_T0, String> */ {
    Ok(v) => v, /* () */
    Err(e) => return Err(e.into()), /* () */
} /* _T3 */]]></programlisting>
			<simpara>
				<code>Result&lt;_T0, String&gt;</code> と <code>Ok(v): Result&lt;(), _&gt;</code> が同じ型であるから、<code>_T0</code> は <type>()</type> であると推論される。
				こうして、 <code>deserialize()</code> は <type>Result&lt;(), String&gt;</type> を返すとされ、 <code>&lt;_ as Deserialize&gt;</code> は <code>&lt;() as Deserialize&gt;</code> と見做される。
			</simpara>
			<programlisting language="rust"><![CDATA[match <() as Deserialize>::deserialize() /* Result<(), String> */ {
    Ok(v) => v, /* () */
    Err(e) => return Err(e.into()), /* () */
} /* () */]]></programlisting>
			<simpara>
				かくして以下のようなエラーが出る。
			</simpara>
			<screen><![CDATA[error[E0277]: the trait bound `(): Deserialize` is not satisfied
  --> src/main.rs:12:13
   |
12 |     let _ = <_ as Deserialize>::deserialize()?;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Deserialize` is not implemented for `()`
   |
   = note: required by `Deserialize::deserialize`

error: aborting due to previous error
]]></screen>
		</section>

		<section xml:id="time-series--issue-39297--problem-core">
			<title>問題の核</title>

			<simpara>
				問題は、以下の2つの点である。
			</simpara>
			<orderedlist>
				<listitem>diverge する式の型が <type>()</type> として推論されること</listitem>
				<listitem><code>Self</code> への推論が弱いこと</listitem>
			</orderedlist>
			<simpara>
				2つめの問題は、 @nikomatsakis 氏が行っている trait system の改善によって解決するであろうとされている。
			</simpara>
			<simpara>
				1つめの問題については、 <code>never_type</code> feature (<link linkend="time-series--rfc-1216">RFC 1216</link> で提案されたもの) によって、 diverge する式の型が <type>!</type> として推論されるようになるが、それには別の問題がある。
				もし上記コードにおいて <type>()</type> が <code>Deserialize</code> を実装していた場合、コンパイルは通っているから、 diverge する式の型のデフォルトを <type>()</type> から <type>!</type> に変更してしまうと、 regression が発生するかもしれない。
			</simpara>
			<simpara>
				この issue を立てた @nikomatsakis 氏は、 <code>?</code> 演算子を早い段階で脱糖するのをやめて、 diverge する式の型情報が <code>?</code> の外にまで洩れないようにすべきではないか、と述べている。
				また、 trait system の改善では互換性破壊は起きないだろうとも述べている。
			</simpara>
		</section>

		<section xml:id="time-series--issue-39297--second-choice">
			<title>第2の選択</title>

			<simpara>
				次のコメントで、 @canndrew 氏が実際に<link xl:href="https://github.com/rust-lang/rust/issues/39297#issuecomment-275922421">挙動が変化する regression になる例を提示した</link>。
			</simpara>
			<simpara>
				そして、このような <code>never_type</code> feature の導入により起きうる regression の回避のために <link xl:href="https://github.com/rust-lang/rust/pull/39009">Add warning for () to ! switch #39009</link> で警告を追加したと述べた。
				さらに、 <type>!</type> は <type>()</type> へと推論することができるから、今まで (<type>()</type> であったがゆえに)通っていたコンパイルが (<type>!</type> になることで)通らなくなる問題は発生しないだろう、とも述べている。
			</simpara>
		</section>

		<section xml:id="time-series--issue-39297--diverging-and-type-inference">
			<title>そもそも diverge する式の型推論からおかしい</title>

			<simpara>
				@nikomatsakis 氏は、デフォルトの型云々以前に、 diverge する式の型推論周辺がそもそも妙なことになっていると @eddyb 氏と話していたと言い、コード片を提示した。
			</simpara>
			<h:blockquote cite="https://github.com/rust-lang/rust/issues/39297#issuecomment-276809637">
				<simpara>
					<code>let x = if true { 22 } else { return; 'a' };</code> の型チェックが(この issue の時点では)通るし、 diverging arm の型が何であるか考えるべきでないよね。<h:br />
					<phrase>(原文: "then we ought not to be considering the type of diverging arm at all.")</phrase>
				</simpara>
				<simpara>
					でも <code>let x: i32</code> と型注釈をつけるとコンパイル通らなくなるし、これはバグと考えるべきだよね。
				</simpara>
				<h:footer>
					&#x2014; <link xl:href="https://github.com/rust-lang/rust/issues/39297#issuecomment-276809637">@nikomatsakis, https://github.com/rust-lang/rust/issues/39297#issuecomment-276809637</link>
				</h:footer>
			</h:blockquote>
			<simpara>
				それまでの実装では、例の else 節のように必ず途中で脱出するブロックでは、ブロックそれ自体は値を返さないから、通常はブロックが返す型について型チェックは行われない。
				しかし、ブロックに特定の型が期待されていた場合、本当にブロックがその型を返すか、ブロック末尾の式 (tail expression) について型チェックを行う実装になっていた<footnote xml:id="footnote-never-on-tail-expression" refmark-id="ref-footnote-never-on-tail-expression">
					<link xl:href="https://github.com/rust-lang/rust/issues/35849">Issue #35849</link> とか <link xl:href="https://github.com/rust-lang/rust/pull/35883">PR #35883</link> あたりが関わっているのだろうか？
					古いことなので詳しく調べてないが、違うかもしれない。
				</footnote>。
				(おそらく、それこそ <code>let x: i32 = { return; 'a' };</code> のようなおかしなコードを弾くためのものだったのだろう。)
			</simpara>
			<simpara>
				しかし @nikomatsakis 氏は上の例で、右辺の式が同じなのに型を明示しない場合はコンパイルが通り、 <code>let x: i32</code> のように型を明示すると今度はコンパイルが通らなくなるのはおかしいと主張した。
				よって、一貫性のある型チェックの方法に修正したい、という話になる。
			</simpara>
			<h:blockquote cite="https://github.com/rust-lang/rust/issues/39297#issuecomment-276810343">
				<simpara>
					@eddyb 氏が、<link xl:href="https://github.com/rust-lang/rust/blob/24055d0f2aa8dce5caed7544e6006aa48dceaea5/src/librustc_typeck/check/mod.rs#L4150-L4160">これらの行</link>を削除すればどっちもコンパイル通るようになることに気付いたよ
				</simpara>
				<h:footer>
					&#x2014; <link xl:href="https://github.com/rust-lang/rust/issues/39297#issuecomment-276810343">@nikomatsakis, https://github.com/rust-lang/rust/issues/39297#issuecomment-276810343</link>
				</h:footer>
			</h:blockquote>
			<h:blockquote cite="https://github.com/rust-lang/rust/issues/39297#issuecomment-277237337">
				<simpara>
					(diverging arm の型を考えず完全にスルーしなくとも、)この場合の else ブロックは <type>!</type> 型であるとするべきじゃない？そうすれば <type>!</type> が <code>22</code> の型に型強制されることができるので型チェックも通るし
				</simpara>
				<h:footer>
					&#x2014; <link xl:href="https://github.com/rust-lang/rust/issues/39297#issuecomment-277237337">@canndrew, https://github.com/rust-lang/rust/issues/39297#issuecomment-277237337</link>
				</h:footer>
			</h:blockquote>
		</section>
	</section>

	<section xml:id="time-series--pr-39485">
		<title>Pull request #39485: unrearchable なコード、絶対実行されないなら型チェックも要らなくない？</title>

		<itemizedlist>
			<listitem>
				<link xl:href="https://github.com/rust-lang/rust/pull/39485">Ignore expected type in diverging blocks #39485</link>
			</listitem>
		</itemizedlist>

		<simpara>
			ここで、 @canndrew 氏が(削除すると問題がなくなるという行を削除する) pull request <link xl:href="https://github.com/rust-lang/rust/pull/39485">Ignore expected type in diverging blocks #39485</link> を出した。
			これにより、「到達しえない位置での<emphasis>一部の型チェックを行わないことでコンパイルを通す</emphasis>」という戦略が使われるようになった。
		</simpara>
		<simpara>
			具体的には、この pull request 以前は、常に diverge するブロックでは「(そのブロックに対して)何らかの <type>!</type> 以外の型が期待されていれば、末尾の式 (tail expression) の型を、ブロックに期待される型へと型強制する。型強制が成功したら、ブロック全体は <type>!</type> として扱う」というアルゴリズムだった。
			これが pull request によって、常に diverge するブロックでは「(そのブロックに対して)どのような型が期待されていようと、<emphasis>末尾の式の型の確認は行わず</emphasis>、ブロック全体を <type>!</type> として扱う」というように変更された。
		</simpara>

		<section xml:id="time-series--pr-39485--regression">
			<title>regression</title>

			<simpara>
				この変更では、期待される型の情報が一部で(具体的には、 diverging な部分式を含むようなブロックの最終的な型の推論で)使われなくなったため、今までは推論できていた部分の型が推論できなくなるという regression が発生する。
				(具体的には <link xl:href="https://github.com/rust-lang/rust/pull/39485/files">https://github.com/rust-lang/rust/pull/39485/files</link> で修正されているテスト群のようなコードで、型注釈が追加されている部分や、後述する regression などで提示されるコードなどである。)
			</simpara>
			<simpara>
				これについて、 return される返り値型のみについて型推論を行うこともできるが、そうすると結局 dead code の型を考えることになり、この pull request で直そうとしていた問題を再導入することになってしまうため、 @nikomatsakis 氏は「必要ないやろ」<link xl:href="https://github.com/rust-lang/rust/pull/39485#issuecomment-277550625">と言った</link>。
			</simpara>
			<simpara>
				また、解決として @canndrew 氏は「推論できなかった部分をデフォで <type>!</type> とすることで、これらの regression を起こさないようにすることはできるよね(できるけどやりたいとは言ってないよ)」<link xl:href="https://github.com/rust-lang/rust/pull/39485#issuecomment-280229460">と言った</link>が、 @nikomatsakis 氏が「 dead code 部分から型の情報が(手前へ)上がってくると、 (<link linkend="time-series--issue-39297">issue #39297</link> で提示され、)この pull request で解決しようとしていた問題を再度引き起こすことになるから良くない」<link xl:href="https://github.com/rust-lang/rust/pull/39485#issuecomment-280345835">と言った</link>。
			</simpara>
			<simpara>
				結局、 regression で直接壊れる crate がとても少なく、型注釈を足すだけで regression は簡単に解消できるため、この pull request はそのまま merge された。
			</simpara>
		</section>
	</section>

	<section xml:id="time-series--issue-39808">
		<title>issue #39808: mac-0.1.0 crate で Rust の regression を発見したんだけど</title>

		<itemizedlist>
			<listitem>
				<link xl:href="https://github.com/rust-lang/rust/issues/39808">mac-0.1.0 fails test suite due to type inference regression in Rust 1.15 #39808</link>
			</listitem>
		</itemizedlist>

		<simpara>
			この regression は、前述の pull request #39485 により発生したもの<emphasis>ではない</emphasis>。<h:br />
			たぶん commit <link xl:href="https://github.com/rust-lang/rust/commit/6b3cc0b8c8094407a3b5ea75f946c682d6d0142a">rustc_typeck: correctly track "always-diverges" and "has-type-errors". ・ rust-lang/rust@6b3cc0b</link> での <filename>src/librustc_typeck/check/mod.rs</filename> の <code>check_then_else()</code> への変更あたりが引き起こしたのだと思う(詳細は確認していない(正確には、確認したけどわからなかった))。
		</simpara>
		<simpara>
			とはいえ、 diverging type の扱いに関するバグであるには違いない。
		</simpara>
		<simpara>
			この regression に対応するため、 mac crate では<link xl:href="https://github.com/reem/rust-mac/pull/13/files">こんな妙な型注釈が必要になった</link>。
		</simpara>
	</section>

	<section xml:id="time-series--issue-39984">
		<title>issue #39984: 最近 nightly で型推論の regression があったんだけど</title>

		<itemizedlist>
			<listitem>
				<link xl:href="https://github.com/rust-lang/rust/issues/39984">Type inference regression in recent nightly #39984</link>
			</listitem>
		</itemizedlist>

		<simpara>
			comment <link xl:href="https://github.com/rust-lang/rust/issues/39984#issuecomment-285863991">https://github.com/rust-lang/rust/issues/39984#issuecomment-285863991</link> で丁寧な解説がされている:
		</simpara>
		<programlisting language="rust"><![CDATA[pub fn encode() -> Result<(), ()> {
    try!(unimplemented!());
    Ok(())
}]]></programlisting>
		<simpara>
			このコードは過去にはコンパイルが通っていたが、 <link linkend="time-series--pr-39485">pull request #39485</link> で到達できない部分の型合わせを行わないようになってしまった結果、 <code>Ok(())</code> の型が <type>Result&lt;(), ()&gt;</type> から推論されなくなった、ということだろうか。
		</simpara>
	</section>

	<section xml:id="time-series--issue-40073">
		<title>issue #40073: unreachable code での型推論が失敗するようになったんだけど</title>

		<itemizedlist>
			<listitem>
				<link xl:href="https://github.com/rust-lang/rust/issues/40073">Type inference failure in unreachable code #40073</link>
			</listitem>
		</itemizedlist>

		<simpara>
			これも、 <code>return</code> で diverge した後の <code>X::B</code> が <type>X&lt;()&gt;</type> へと推論できない例で、 <link linkend="time-series--pr-39485">pull request #39485</link> による予期されていた regression である。
		</simpara>
	</section>

	<section xml:id="time-series--pr-40224">
		<title>pull request #40224: diverging types 周辺の型推論の戦略を変えるよ</title>

		<itemizedlist>
			<listitem>
				<link xl:href="https://github.com/rust-lang/rust/pull/40224">change the strategy for diverging types #40224</link>
			</listitem>
			<listitem>
				<link xl:href="https://github.com/rust-lang/rust/pull/40224#issuecomment-288075549">最終的な仕様変更のまとめコメント</link>
			</listitem>
		</itemizedlist>

		<simpara>
			この pull request での変更は以下のとおり:
		</simpara>
		<itemizedlist>
			<listitem>
				直接 <type>!</type> 型になる場合:
				<itemizedlist>
					<listitem>
						ブロックに diverge する文 (statement) があり、かつ<emphasis>末尾の式</emphasis> (tail expression) がない場合 (<code>{ return; }</code> など)、そのブロックの型も <type>!</type> となる。
					</listitem>
					<listitem>
						<type>!</type> 型になるどのような式も、 diverge するものと見做される。
					</listitem>
				</itemizedlist>
			</listitem>
			<listitem>
				<type>!</type> への型強制:
				<itemizedlist>
					<listitem>
						diverge する式が生成したどのような型の値についても、それが <type>!</type> へと型強制されることを許す。
						(たとえば <code>fn foo() -> ! { panic!(); 32 }</code> のような例では、関数の本体は diverge するから、それが生成する値 <code>32</code> が <type>!</type> へ型強制され、結果型チェックが通る。)
					</listitem>
				</itemizedlist>
			</listitem>
			<listitem>
				<type>!</type> からの型強制:
				<itemizedlist>
					<listitem>
						<type>!</type> からどのような型への型強制も、常に許される。
					</listitem>
				</itemizedlist>
			</listitem>
			<listitem>
				diverge するからといって、それ以降の dead code の型が無視されることはない
			</listitem>
		</itemizedlist>

		<important>
			<title>古い情報</title>
			<simpara>
				<link linkend="time-series2--issue-46325">issue #46325</link>, <link linkend="time-series2--pr-45880">PR #45880</link> により、 <emphasis><type>!</type> への型強制を許すルールは削除された</emphasis>。
			</simpara>
		</important>

		<simpara>
			(<emphasis>以下、 pull request よく読んでないし、修正後の提案に対する話かどうかさえわからないので、断片的な情報</emphasis>)
		</simpara>
		<simpara>
			通常 <code>{ expr; }</code> は <code>{ expr; () }</code> と同等に扱われるが、この変更の後は、 diverge する式やブロックに対してこれは適用されない。
			これは <link xl:href="https://github.com/rust-lang/rust/pull/40224#issuecomment-283878903">@canndrew 氏が質問し</link> <link xl:href="https://github.com/rust-lang/rust/pull/40224#issuecomment-284034309">@nikomatsakis 氏が回答している</link>。
		</simpara>
		<simpara>
			@nikomatsakis 氏は <link xl:href="https://github.com/rust-lang/rust/pull/40224#issuecomment-285806743">https://github.com/rust-lang/rust/pull/40224#issuecomment-285806743</link> で、解決できなかった型に対して <type>!</type> のフォールバックが使われる場合の原理と問題点を説明している。
		</simpara>
	</section>

	<section xml:id="time-series--pr-40636">
		<title>pull request #40636: pull request #39485 で発生した regression を避けるため revert するよ</title>

		<itemizedlist>
			<listitem>
				<link xl:href="https://github.com/rust-lang/rust/pull/40636">Revert #39485, fixing type-inference regressions #40636</link>
			</listitem>
		</itemizedlist>

		<simpara>
			問題の解決は <link linkend="time-series--pr-40224">pull request #40224</link> で行うため、過去の変更 <link linkend="time-series--pr-39485">pull request #39485</link> を revert しようという pull request 。
		</simpara>
		<simpara>
			(pull request #40224 より前に) merge された。
		</simpara>
	</section>

	<section xml:id="time-series--future">
		<title>これからのこと</title>
		<itemizedlist>
			<listitem>
				<link xl:href="https://github.com/rust-lang/rust/issues/35121">issue #35121</link>: tracking issue (RFC 1216): <type>!</type> を普通の型にしたい
			<itemizedlist>
				<listitem>
					<link xl:href="https://github.com/rust-lang/rust/issues/40800">issue #40800</link>: divergence の意味論をちゃんと決めて型強制がうまいこといくようにしたい
				</listitem>
				<listitem>
					<link xl:href="https://github.com/rust-lang/rust/issues/40801">issue #40801</link>: 決定できなかった型をなんでもデフォで <type>!</type> にフォールバックさせるのはよくない
				</listitem>
			</itemizedlist>
		 	</listitem>
		</itemizedlist>
	</section>
</section>

<section xml:id="time-series2">
	<title>時系列2 (<le:time datetime="2017-10-14">2017-10-14</le:time> から <le:time datetime="2017-12-07">2017-12-07</le:time>まで)</title>

	<itemizedlist>
		<listitem>
			<xref linkend="time-series2--issue-40800" />
		</listitem>
		<listitem>
			<xref linkend="time-series2--issue-40801" />
		</listitem>
		<listitem>
			<xref linkend="time-series2--pr-45880" />
		</listitem>
		<listitem>
			<xref linkend="time-series2--issue-46325" />
		</listitem>
	</itemizedlist>

	<section xml:id="time-series2--issue-40800">
		<title>issue #40800: divergence の意味論をちゃんと決めて型強制がうまいこといくようにしたい</title>
		<itemizedlist>
			<listitem>
				<link xl:href="https://github.com/rust-lang/rust/issues/40800">Settle desired semantics of divergence for purposes of coercion #40800</link>
			</listitem>
		</itemizedlist>

		<simpara>
			<xref linkend="time-series--pr-40224">PR #40224</xref> にて、 diverge する式で <type>!</type> への型強制を許すルールを追加したが、どうも実装当時と微妙にフラグの意味が違ってたりとか、ルールがイケてるかどうか微妙なところがあったりするので、はっきりさせたいよねという話。
		</simpara>
		<simpara>
			結局、 <type>!</type> への型強制を許すルールってどう有用なのかはっきりしないし、完全になくしてよくない？と @nikomatsakis 氏と @arielb1 氏は考えていたようで、 <link linkend="time-series2--pr-45880">PR #45880</link> で到達不可能なコードで <type>!</type> への型強制を許すルールは削除されることになった(というか、削除された)。
		</simpara>
	</section>

	<section xml:id="time-series2--issue-40801">
		<title>issue #40801: 解決できなかった型をデフォで `!` に推論するの、やめた方がよくない？</title>

		<itemizedlist>
			<listitem>
				<link xl:href="https://github.com/rust-lang/rust/issues/40801">Change which type variables fall back to `!` #40801</link>
			</listitem>
		</itemizedlist>

		<simpara>
			フォールバックのルールを変えると非互換な変更になってしまうというのと、提案されたルールが十分良さげというわけでもなさそうという、2つの理由からクローズされた。
		</simpara>
		<simpara>
			(よく読んでない。)
		</simpara>
	</section>

	<section xml:id="time-series2--pr-45880">
		<title>pull request #45880: 到達不可能な場所での `!` への型強制は許さないことにするわ</title>

		<itemizedlist>
			<listitem>
				<link xl:href="https://github.com/rust-lang/rust/pull/45880">make coercions to `!` in unreachable code a hard error #45880</link>
			</listitem>
			<listitem>
				<link xl:href="https://github.com/rust-lang/rust/issues/46325">Tracking issue for `coerce_never` compatibility lint #46325</link>
			</listitem>
		</itemizedlist>

		<simpara>
			タイトルそのまま。
		</simpara>
	</section>

	<section xml:id="time-series2--issue-46325">
		<title>issue 46325: `coerce_never` compatibility lint の tracking issue</title>

		<itemizedlist>
			<listitem>
				<link xl:href="https://github.com/rust-lang/rust/issues/46325">Tracking issue for `coerce_never` compatibility lint #46325</link>
			</listitem>
		</itemizedlist>

		<simpara>
			結局、 <link linkend="time-series2--pr-45880">PR #45880</link> で、 diverge する式(ブロック)で <type>!</type> への型強制を常に許すという仕様が削除された。
			<type>!</type> だけに特例で妙な型強制を許すのは一貫性がないから、とのこと。
		</simpara>
		<simpara>
			もしこの変更に由来するエラーに遭遇したら、ブロック末尾に生の式 (trailing expression) を置かず、必ずセミコロンで終わらせれば良いとのこと。
		</simpara>
		<programlisting language="rust"><![CDATA[fn example_fixes() -> ! {
    Some(panic!()); // now with more semicolons
    // no trailing expression, this can return any type!
}]]></programlisting>
		<simpara>
			そういったわけで、今では <link linkend="time-series--pr-40224">PR #40224</link> で実装されたルールは少々変更されている。
		</simpara>
	</section>
</section>

<section xml:id="references">
	<title>参考</title>

	<itemizedlist>
		<listitem>
			issues
			<itemizedlist>
				<listitem>
					<link xl:href="https://github.com/rust-lang/rfcs/pull/1216">Promote `!` to a type. #1216</link>
					<itemizedlist>
						<listitem>
							<link xl:href="https://github.com/rust-lang/rfcs/blob/master/text/1216-bang-type.md">RFC 1216</link>
						</listitem>
						<listitem>
							<link xl:href="https://github.com/rust-lang/rust/issues/35121">Tracking issue for promoting `!` to a type (RFC 1216) #35121</link>
						</listitem>
						<listitem>
							<link xl:href="https://github.com/rust-lang/rust/issues/40801">Change which type variables fall back to `!` #40801</link>
						</listitem>
					</itemizedlist>
				</listitem>
				<listitem>
					<link xl:href="https://github.com/rust-lang/rust/issues/40800">Settle desired semantics of divergence for purposes of coercion #40800</link>
				</listitem>
				<listitem>
					<link xl:href="https://github.com/rust-lang/rust/pull/40224">change the strategy for diverging types #40224</link>
					<itemizedlist>
						<listitem>
							<link xl:href="https://github.com/rust-lang/rust/issues/39808">mac-0.1.0 fails test suite due to type inference regression in Rust 1.15 #39808</link>
						</listitem>
						<listitem>
							<link xl:href="https://github.com/rust-lang/rust/issues/39984">Type inference regression in recent nightly #39984</link>
						</listitem>
						<listitem>
							<link xl:href="https://github.com/rust-lang/rust/issues/40073">Type inference failure in unreachable code #40073</link>
						</listitem>
						<listitem>
							<link xl:href="https://github.com/rust-lang/rust/pull/40636">Revert #39485, fixing type-inference regressions #40636</link>
						</listitem>
					</itemizedlist>
				</listitem>
				<listitem>
					<link xl:href="https://github.com/rust-lang/rust/pull/39485">Ignore expected type in diverging blocks #39485</link>
				</listitem>
				<listitem>
					<link xl:href="https://github.com/rust-lang/rust/issues/39297">fallback for diverging expressions leaks into the `?` operator #39297</link>
				</listitem>
				<listitem>
					<link xl:href="https://github.com/rust-lang/rust/pull/39009">Add warning for () to ! switch #39009</link>
				</listitem>
				<listitem>
					<link xl:href="https://github.com/rust-lang/rust/issues/46325">Tracking issue for `coerce_never` compatibility lint #46325</link>
				</listitem>
				<listitem>
					<itemizedlist>
						<listitem>
							<link xl:href="https://github.com/rust-lang/rust/pull/45880">make coercions to `!` in unreachable code a hard error #45880</link>
						</listitem>
						<listitem>
							<link xl:href="https://github.com/rust-lang/rust/issues/35849">diverging function with wrapped diverging tail expression regression #35849</link>
						</listitem>
						<listitem>
							<link xl:href="https://github.com/rust-lang/rust/pull/35883">typeck: use NoExpectation to check return type of diverging fn #35883</link>
						</listitem>
					</itemizedlist>
				</listitem>
				<listitem>
					<link xl:href="https://github.com/rust-lang/rust/issues/40801">Change which type variables fall back to `!` #40801</link>
				</listitem>
				<listitem>
					<link xl:href="https://github.com/rust-lang/rust/pull/45435">rustc_typeck: use subtyping on the LHS of binops. by eddyb · Pull Request #45435 · rust-lang/rust</link> (merged on 2017-11-01)
					<itemizedlist>
						<listitem>
							<link linkend="time-series--issue-39297--problem-core"><code>Self</code> に対する型推論が弱い問題</link>についての解決策となる改善(だと思うが、ちゃんと確認したわけではない)。
						</listitem>
					</itemizedlist>
				</listitem>
			</itemizedlist>
		</listitem>
		<listitem>
			ソースコード等
			<itemizedlist>
				<listitem>
					<link xl:href="https://github.com/rust-lang/rust/blob/e11f6d535532d1a8cc721117e2644da0b47271e5/src/librustc_typeck/check/mod.rs#L511"><filename>src/librustc_typeck/check/mod.rs</filename> で定義される <type>FnCtxt</type> での diverge 情報を持つフィールドのコメント</link>
				</listitem>
				<listitem>
					<link xl:href="https://github.com/rust-lang/rust/blob/7ae95e548929f4924905b2e8f87f2dd57d8bc887/src/test/compile-fail/coerce-to-bang.rs"><filename>src/test/compile-fail/coerce-to-bang.rs</filename> での、 <type>!</type> への型強制についてのテスト</link>
				</listitem>
				<listitem>
					<link xl:href="https://github.com/rust-lang/rust/blob/7ae95e548929f4924905b2e8f87f2dd57d8bc887/src/test/ui/reachable/README.md"><filename>src/test/ui/reachable/README.md</filename>, reachability test の極めて簡単な説明</link>
				</listitem>
			</itemizedlist>
		</listitem>
	</itemizedlist>
</section>

</article>
